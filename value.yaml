# N8N Helm Chart Configuration with External Redis and PostgreSQL
# Updated from CloudNativePG setup to external services with NodePort

# Define hostname anchor at the top of the file
_shared_config:
  hostname: &hostname localhost
  url: &url http://0.0.0.0:30200

# Keep the original image configuration
# image:
#   repository: 8gears.container-registry.com/ops/n8n
#   tag: 1.81.4
#   pullPolicy: Always

# imagePullSecrets:
#   - name: 8gears-registry-n8n

# Global node selector for all components
nodeSelector:
  server: n8n

# Enable scaling for queue mode with multiple workers
scaling:
  enabled: true
  worker:
    replicaCount: 3
  webhook:
    enabled: false  # Disabled as requested

# Disable INTERNAL Redis - using external Redis
redis:
  enabled: false

# Disable Valkey as well (replacing the original valkey config)
valkey:
  enabled: false

# External Redis configuration
externalRedis:
  enabled: true
  host: redis-service
  port: 6379
  password: 
    valueFrom:
      secretKeyRef:
        name: redis-secrets
        key: password
  database: 0

# Main n8n instance configuration
main:
  config:
    n8n:
      editor_base_url: *url
      hide_usage_page: true
    
    # Updated executions mode for queue
    executions:
      mode: queue
    
    # Database configuration - External PostgreSQL
    db:
      type: postgresdb
      postgresdb:
        host: postgres-service
        port: 5432
        user: n8n
        database: n8n
        pool:
          max: 10
        ssl:
          enabled: false
    
    # webhook related settings
    webhook_url: *url
    
    # Queue configuration with external Redis
    queue:
      health:
        check:
          active: true
      bull:
        redis:
          host: redis-service
          port: 6379
          db: 0
    
    # Redis configuration for main instance
    redis:
      host: redis-service
      port: 6379
      db: 0
    
    # Security settings
    security:
      audit:
        daysAbandonedWorkflow: 90
  
  # Secrets configuration
  secret:
    n8n:
      encryption_key: "n8n-secure-encryption-key-2024"
  
  # Environment variables for database password
  extraEnv:
    DB_POSTGRESDB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: password
    N8N_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: redis-secrets
          key: password
  
  # Resource limits (kept from original)
  resources:
    limits:
      memory: 2048Mi
    requests:
      memory: 512Mi
  
  # Node selector
  nodeSelector:
    server: n8n
  
  # Service configuration with NodePort (replacing ingress)
  service:
    type: NodePort
    port: 5678
    nodePort: 30200
  
  # Liveness and Readiness Probes configuration
  livenessProbe:
    httpGet:
      path: /healthz
      port: 5678
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /healthz
      port: 5678
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

# Worker configuration with external Redis
worker:
  enabled: true
  nodeSelector:
    server: n8n
  
  resources:
    limits:
      memory: 1536Mi
    requests:
      memory: 256Mi
  
  # Worker config for queue mode with external Redis
  config:
    executions:
      mode: queue
    redis:
      host: redis-service
      port: 6379
      db: 0
  
  # Environment variables for database and redis passwords
  extraEnv:
    DB_POSTGRESDB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: password
    N8N_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: redis-secrets
          key: password
  
  # ADD ENCRYPTION KEY FOR WORKERS
  secret:
    n8n:
      encryption_key: "n8n-secure-encryption-key-2024"
  
  # Environment variables for database and redis passwords
  extraEnv:
    DB_POSTGRESDB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: postgres-secrets
          key: password
    N8N_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: redis-secrets
          key: password
  
  # Worker probes
  livenessProbe:
    httpGet:
      path: /healthz
      port: 5678
    initialDelaySeconds: 45
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: /healthz
      port: 5678
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Webhook disabled as requested
webhook:
  enabled: false

# Disable ingress for NodePort setup
ingress:
  enabled: false

# Environment variables for Redis connection
env:
  N8N_REDIS_HOST: redis-service
  N8N_REDIS_PORT: "6379"
  N8N_REDIS_DB: "0"
  # Add encryption key as environment variable for all components
  N8N_ENCRYPTION_KEY: "n8n-secure-encryption-key-2024"

# Secret manifests for PostgreSQL and Redis
extraManifests:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-secrets
    type: Opaque
    data:
      password: bjhuX3Bhc3N3b3Jk  # base64 encoded: n8n_password
  
  - apiVersion: v1
    kind: Secret
    metadata:
      name: redis-secrets
    type: Opaque
    data:
      password: cmVkaXNfcGFzc3dvcmQ=  # base64 encoded: redis_password