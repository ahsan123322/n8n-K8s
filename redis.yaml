# Simplified prod setup with standard PostgreSQL and NodePort
# Following 8gears/n8n-helm-chart standard format v1.0.0+

image:
  repository: 8gears.container-registry.com/ops/n8n
  tag: 1.81.4
imagePullSecrets:
  - name: 8gears-registry-n8n

# Global node selector for all components
nodeSelector:
  server: n8n

# Enable scaling for queue mode with webhook instances
scaling:
  enabled: true
  worker:
    replicaCount: 3
  webhook:
    enabled: true
    replicaCount: 1

# External Redis configuration
redis:
  host: "redis-hostname"
  password: "redis-password-if-set"
  port: 6379

# Worker configuration - corrected structure
worker:
  enabled: true
  nodeSelector:
    server: n8n
  resources:
    limits:
      memory: 1536Mi
    requests:
      memory: 256Mi
  # Worker-specific config as map, not array
  config:
    executions:
      mode: queue
    queue:
      bull:
        redis:
          host: redis-hostname
          port: 6379
          password: redis-password-if-set

# Webhook configuration - corrected structure  
webhook:
  enabled: true
  nodeSelector:
    server: n8n
  resources:
    limits:
      memory: 1024Mi
    requests:
      memory: 256Mi
  # Webhook-specific config as map
  config:
    executions:
      mode: queue
    queue:
      bull:
        redis:
          host: redis-hostname
          port: 6379
          password: redis-password-if-set

# Disable internal Valkey/Redis since using external
valkey:
  enabled: false

# Main n8n instance configuration
main:
  config:
    # Database configuration
    db:
      type: postgresdb
      postgresdb:
        host: postgres-service
        port: 5432
        user: n8n
        password: n8n_password
        database: n8n
        pool:
          max: 10
        ssl:
          enabled: false
    
    # Queue configuration for main instance
    executions:
      mode: queue
    queue:
      bull:
        redis:
          host: redis-hostname
          port: 6379
          password: redis-password-if-set
    
    # Security
    security:
      audit:
        daysAbandonedWorkflow: 90
  
  # Secrets configuration
  secret:
    n8n:
      encryption_key: "your-secure-encryption-key-here"
  
  # Resource limits
  resources:
    limits:
      memory: 2048Mi
    requests:
      memory: 512Mi
  
  # Node selector
  nodeSelector:
    server: n8n
  
  # Service configuration with NodePort
  service:
    type: NodePort
    port: 5678
    nodePort: 30200

# Disable ingress for local setup
ingress:
  enabled: false

# External dependencies via extraManifests
extraManifests:
  # Redis server for queue management
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: redis-external
      labels:
        app: redis-external
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: redis-external
      template:
        metadata:
          labels:
            app: redis-external
        spec:
          nodeSelector:
            server: n8n
          containers:
          - name: redis
            image: redis:7-alpine
            args:
            - redis-server
            - --requirepass
            - redis-password-if-set
            - --appendonly
            - "yes"
            ports:
            - containerPort: 6379
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
            volumeMounts:
            - name: redis-storage
              mountPath: /data
            livenessProbe:
              exec:
                command:
                - redis-cli
                - --no-auth-warning
                - -a
                - redis-password-if-set
                - ping
              initialDelaySeconds: 30
              periodSeconds: 10
            readinessProbe:
              exec:
                command:
                - redis-cli
                - --no-auth-warning
                - -a
                - redis-password-if-set
                - ping
              initialDelaySeconds: 5
              periodSeconds: 5
          volumes:
          - name: redis-storage
            emptyDir: {}

  - apiVersion: v1
    kind: Service
    metadata:
      name: redis-hostname
      labels:
        app: redis-external
    spec:
      selector:
        app: redis-external
      ports:
      - port: 6379
        targetPort: 6379
        protocol: TCP

  # PostgreSQL database
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: postgres
      labels:
        app: postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: postgres
      template:
        metadata:
          labels:
            app: postgres
        spec:
          nodeSelector:
            server: n8n
          containers:
          - name: postgres
            image: postgres:15
            env:
            - name: POSTGRES_DB
              value: n8n
            - name: POSTGRES_USER
              value: n8n
            - name: POSTGRES_PASSWORD
              value: n8n_password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            ports:
            - containerPort: 5432
            resources:
              requests:
                memory: "512Mi"
                cpu: "200m"
              limits:
                memory: "1Gi"
                cpu: "1000m"
            volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            livenessProbe:
              exec:
                command:
                - pg_isready
                - -U
                - n8n
                - -d
                - n8n
              initialDelaySeconds: 30
              periodSeconds: 10
            readinessProbe:
              exec:
                command:
                - pg_isready
                - -U
                - n8n
                - -d
                - n8n
              initialDelaySeconds: 5
              periodSeconds: 5
          volumes:
          - name: postgres-storage
            emptyDir: {}
  
  - apiVersion: v1
    kind: Service
    metadata:
      name: postgres-service
      labels:
        app: postgres
    spec:
      selector:
        app: postgres
      ports:
      - port: 5432
        targetPort: 5432
        protocol: TCP